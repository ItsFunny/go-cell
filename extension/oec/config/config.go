package config

var (
	OECConfigModule = "oec"
	Default         = "Default"
)

const (
	rpcNode       = 1 << 0
	validatorNode = 1 << 1
	webSocketNode = 1 << 2
)

type OECConfiguration struct {
}

type Node struct {
	Name string `json:"name"`
	Url  string `json:"url"`
	Type byte   `json:"type"`
}

type ContractConfiguration struct {
	ContractName string `json:"contractName"`
	ABIHexString string `json:"aBIHexString"`
	BinHexString string `json:"binHexString"`
	ChainId      int64  `json:"chainId"`
	GasLimit     uint64 `json:"gasLimit"`
	GasPrice     int64  `json:"gasPrice"` //= 100000000 // 0.1 gwei

	TxPriceBump float64 `json:"txPriceBump"`
	//
	AdminMoniker         string `json:"adminMoniker"`
	DefaultTransferCount int64  `json:"defaultTransferCount"`
}

type OECConfig struct {
	Nodes    []Node                `json:"nodes"`
	Contract ContractConfiguration `json:"contract"`
}

func NewDefaultOECConfig() *OECConfig {
	ret := &OECConfig{
		Nodes: []Node{
			{
				Name: Default,
				Url:  "ws://127.0.0.1:8546",
				Type: webSocketNode,
			},
			{
				Name: Default,
				Url:  "http://127.0.0.1:8545",
				Type: rpcNode,
			},
		},
		Contract: ContractConfiguration{
			ContractName: "counter",
			ABIHexString: "5b0a097b0a090922616e6f6e796d6f7573223a2066616c73652c0a090922696e70757473223a205b0a0909097b0a0909090922696e6465786564223a2066616c73652c0a0909090922696e7465726e616c54797065223a202275696e74323536222c0a09090909226e616d65223a2022636f756e746572222c0a090909092274797065223a202275696e74323536220a0909097d0a09095d2c0a0909226e616d65223a20224164646564222c0a09092274797065223a20226576656e74220a097d2c0a097b0a090922616e6f6e796d6f7573223a2066616c73652c0a090922696e70757473223a205b0a0909097b0a0909090922696e6465786564223a2066616c73652c0a0909090922696e7465726e616c54797065223a202275696e74323536222c0a09090909226e616d65223a2022636f756e746572222c0a090909092274797065223a202275696e74323536220a0909097d0a09095d2c0a0909226e616d65223a20224368616e676564222c0a09092274797065223a20226576656e74220a097d2c0a097b0a090922636f6e7374616e74223a2066616c73652c0a090922696e70757473223a205b0a0909097b0a0909090922696e7465726e616c54797065223a202275696e74323536222c0a09090909226e616d65223a202264656c7461222c0a090909092274797065223a202275696e74323536220a0909097d0a09095d2c0a0909226e616d65223a2022616464222c0a0909226f757470757473223a205b5d2c0a09092270617961626c65223a2066616c73652c0a09092273746174654d75746162696c697479223a20226e6f6e70617961626c65222c0a09092274797065223a202266756e6374696f6e220a097d2c0a097b0a090922636f6e7374616e74223a20747275652c0a090922696e70757473223a205b5d2c0a0909226e616d65223a2022676574436f756e746572222c0a0909226f757470757473223a205b0a0909097b0a0909090922696e7465726e616c54797065223a202275696e74323536222c0a09090909226e616d65223a2022222c0a090909092274797065223a202275696e74323536220a0909097d0a09095d2c0a09092270617961626c65223a2066616c73652c0a09092273746174654d75746162696c697479223a202276696577222c0a09092274797065223a202266756e6374696f6e220a097d2c0a097b0a090922636f6e7374616e74223a2066616c73652c0a090922696e70757473223a205b5d2c0a0909226e616d65223a20227375627472616374222c0a0909226f757470757473223a205b5d2c0a09092270617961626c65223a2066616c73652c0a09092273746174654d75746162696c697479223a20226e6f6e70617961626c65222c0a09092274797065223a202266756e6374696f6e220a097d0a5d",
			BinHexString: "60806040526000805534801561001457600080fd5b50610289806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631003e2d2146100465780636deebae3146100745780638ada066e1461007e575b600080fd5b6100726004803603602081101561005c57600080fd5b810190808035906020019092919050505061009c565b005b61007c61011c565b005b61008661024b565b6040518082815260200191505060405180910390f35b80600054016000819055507f64a55044d1f2eddebe1b90e8e2853e8e96931cefadbfa0b2ceb34bee360619416000546040518082815260200191505060405180910390a17f938d2ee5be9cfb0f7270ee2eff90507e94b37625d9d2b3a61c97d30a4560b8296000546040518082815260200191505060405180910390a150565b60008054116040518060400160405280600f81526020017f434f554e5445525f544f4f5f4c4f570000000000000000000000000000000000815250906101fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101c25780820151818401526020810190506101a7565b50505050905090810190601f1680156101ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000808154809291906001900391905055507f938d2ee5be9cfb0f7270ee2eff90507e94b37625d9d2b3a61c97d30a4560b8296000546040518082815260200191505060405180910390a1565b6000805490509056fea265627a7a72315820c6f3b99c79c6b8f58139949ba74a7935659433d5296a69d6e828e5aab1c52d0864736f6c63430005110032",
			ChainId:      100, //oec
			//GasLimit:     100000000, // 0.1 gwei
			GasLimit: 3000000, // 0.1 gwei
			//GasPrice:     3000000,
			//GasPrice: 1000,
			GasPrice:             100000000,
			AdminMoniker:         "captain",
			DefaultTransferCount: 1000000000000000,
			TxPriceBump:          20,
		},
	}
	return ret
}

func (this *OECConfig) GetRPCNodes() []Node {
	ret := make([]Node, 0)
	for _, node := range this.Nodes {
		if node.Type == rpcNode {
			ret = append(ret, node)
		}
	}
	return ret
}

func (this *OECConfig) GetOneWebSocketNode() Node {
	ret := make([]Node, 0)
	for _, node := range this.Nodes {
		if node.Type == webSocketNode {
			ret = append(ret, node)
		}
	}
	return ret[0]
}
